name: Debug Build

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to test'
        required: true
        default: 'ubuntu-22.04'
        type: choice
        options:
          - ubuntu-22.04
          - windows-latest
          - macos-latest

jobs:
  debug-build:
    runs-on: ${{ github.event.inputs.platform }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Debug Environment
        run: |
          echo "=== 环境信息 ==="
          echo "Platform: ${{ github.event.inputs.platform }}"
          echo "Node version: $(node --version)"
          echo "Bun version: $(bun --version)"
          echo "Rust version: $(rustc --version)"
          echo "Python version: $(python3 --version)"
          
          echo "=== 系统信息 ==="
          uname -a || echo "无法获取系统信息"
          
          echo "=== 目录结构 ==="
          ls -la
          ls -la src-tauri/ || echo "src-tauri 目录不存在"

      - name: Install Python dependencies
        run: |
          echo "=== 安装 Python 依赖 ==="
          pip install --upgrade pip
          pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org -r src-tauri/requirements.txt || {
            echo "默认源失败，尝试清华源..."
            pip install -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.edu.cn -r src-tauri/requirements.txt
          }

      - name: Install system dependencies (Ubuntu)
        if: github.event.inputs.platform == 'ubuntu-22.04'
        run: |
          echo "=== Ubuntu 依赖安装 ==="
          sudo apt-get update
          
          echo "安装基础工具..."
          sudo apt-get install -y build-essential libssl-dev pkg-config
          
          echo "安装 WebKit 依赖..."
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libgdk-pixbuf2.0-dev \
            libglib2.0-dev \
            libgirepository1.0-dev || {
            echo "webkit2gtk-4.1-dev 安装失败，尝试安装 webkit2gtk-4.0-dev..."
            sudo apt-get install -y libwebkit2gtk-4.0-dev
          }
          
          echo "检查依赖..."
          pkg-config --exists webkit2gtk-4.1 && echo "✅ webkit2gtk-4.1" || echo "❌ webkit2gtk-4.1"
          pkg-config --exists gtk+-3.0 && echo "✅ gtk+-3.0" || echo "❌ gtk+-3.0"
          
          echo "=== 查找 webkit2gtk 相关文件 ==="
          find /usr -name "*webkit2gtk*" 2>/dev/null | head -10
          
          echo "=== pkg-config 详细信息 ==="
          pkg-config --modversion webkit2gtk-4.1 2>/dev/null || echo "无法获取 webkit2gtk-4.1 版本"
          pkg-config --cflags --libs webkit2gtk-4.1 2>/dev/null || echo "无法获取 webkit2gtk-4.1 配置"

      - name: Install system dependencies (Windows)
        if: github.event.inputs.platform == 'windows-latest'
        run: |
          echo "=== Windows 依赖安装 ==="
          
          echo "设置 Rust 目标..."
          rustup target add x86_64-pc-windows-msvc
          
          echo "检查 Visual Studio 工具..."
          where cl || echo "cl 未找到"
          where link || echo "link 未找到"
          
          echo "设置环境变量..."
          echo "CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_LINKER=link.exe" >> $env:GITHUB_ENV
          
          # 清理可能存在的旧 WiX 工具
          echo "清理旧的 WiX 工具..."
          Remove-Item -Path "$env:USERPROFILE\AppData\Local\tauri\WixTools*" -Recurse -Force -ErrorAction SilentlyContinue
          
          # 设置 WiX 相关环境变量
          echo "设置 WiX 环境变量..."
          echo "WIX_ROOT=$env:USERPROFILE\AppData\Local\tauri\WixTools314" >> $env:GITHUB_ENV
          echo "PATH=$env:USERPROFILE\AppData\Local\tauri\WixTools314;$env:PATH" >> $env:GITHUB_ENV

      - name: Install system dependencies (macOS)
        if: github.event.inputs.platform == 'macos-latest'
        run: |
          echo "=== macOS 依赖安装 ==="
          
          echo "检查 Xcode 工具..."
          xcode-select -p || echo "Xcode 工具未安装"
          
          echo "设置 Rust 目标..."
          rustup target add aarch64-apple-darwin x86_64-apple-darwin

      - name: Install frontend dependencies
        run: |
          echo "=== 安装前端依赖 ==="
          bun install

      - name: Clean previous builds
        run: |
          echo "=== 清理之前的构建 ==="
          rm -rf src-tauri/target/
          rm -rf src-tauri/Cargo.lock
          rm -rf dist/
          
          # Windows 特定清理
          if [ "${{ github.event.inputs.platform }}" = "windows-latest" ]; then
            echo "清理 Windows 特定缓存..."
            Remove-Item -Path "$env:USERPROFILE\AppData\Local\tauri\WixTools*" -Recurse -Force -ErrorAction SilentlyContinue
            Remove-Item -Path "$env:USERPROFILE\AppData\Local\tauri\NsisTools*" -Recurse -Force -ErrorAction SilentlyContinue
          fi

      - name: Build frontend
        run: |
          echo "=== 构建前端 ==="
          bun run build

      - name: Debug Tauri build
        run: |
          echo "=== 调试 Tauri 构建 ==="
          echo "检查 Tauri 配置..."
          cat src-tauri/tauri.conf.json
          
          echo "检查 Cargo.toml..."
          cat src-tauri/Cargo.toml
          
          echo "=== 检查 Tauri CLI 版本 ==="
          bun run tauri --version
          
          echo "=== 检查 Rust 工具链 ==="
          rustup show
          
          echo "=== 检查环境变量 ==="
          echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
          
          echo "=== 尝试构建 ==="
          # 设置 Windows 特定环境变量
          if [ "${{ github.event.inputs.platform }}" = "windows-latest" ]; then
            export WIX_ROOT="$WIX_ROOT"
            export PATH="$WIX_ROOT:$PATH"
          fi
          
          bun run tauri build --verbose || {
            echo "构建失败，尝试调试模式..."
            bun run tauri build --debug
          }

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-${{ github.event.inputs.platform }}
          path: |
            src-tauri/target/
          retention-days: 1 