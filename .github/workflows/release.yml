name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - macos-latest
          - ubuntu-22.04
          - windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          # 尝试使用国内镜像源解决 SSL 问题
          pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org -r src-tauri/requirements.txt || {
            echo "使用默认源失败，尝试使用国内镜像源..."
            pip install -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.edu.cn -r src-tauri/requirements.txt || {
              echo "清华源失败，尝试阿里云源..."
              pip install -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com -r src-tauri/requirements.txt
            }
          }

      - name: Install system dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          # 基础构建工具
          sudo apt-get install -y build-essential libssl-dev pkg-config
          
          # WebKit 和 GTK 依赖 - 根据 GitHub 讨论修复
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libgdk-pixbuf2.0-dev \
            libglib2.0-dev \
            libgirepository1.0-dev || {
            echo "webkit2gtk-4.1-dev 安装失败，尝试安装 webkit2gtk-4.0-dev..."
            sudo apt-get install -y libwebkit2gtk-4.0-dev
          }
          
          # 音频处理依赖
          sudo apt-get install -y ffmpeg || echo "FFmpeg 安装失败，继续构建"
          
          # 检查关键依赖是否安装成功
          echo "检查关键依赖..."
          pkg-config --exists webkit2gtk-4.1 && echo "✅ webkit2gtk-4.1 已安装" || pkg-config --exists webkit2gtk-4.0 && echo "✅ webkit2gtk-4.0 已安装" || echo "❌ webkit2gtk 未安装"
          pkg-config --exists gtk+-3.0 && echo "✅ gtk+-3.0 已安装" || echo "❌ gtk+-3.0 未安装"

      - name: Install system dependencies (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          # 确保 Xcode 命令行工具已安装
          xcode-select --install || true
          # 设置 Rust 目标
          rustup target add aarch64-apple-darwin x86_64-apple-darwin
          # 安装 FFmpeg
          brew install ffmpeg || true

      - name: Install system dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          # 使用 GitHub Actions 的 Visual Studio 设置
          echo "设置 Visual Studio 环境..."
          
          # 设置 Rust 目标
          rustup target add x86_64-pc-windows-msvc
          
          # 检查 Visual Studio 工具
          echo "检查 Visual Studio 工具..."
          where cl || echo "cl 未找到"
          where link || echo "link 未找到"
          
          # 设置环境变量
          echo "设置环境变量..."
          echo "CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_LINKER=link.exe" >> $env:GITHUB_ENV

      - name: Install frontend dependencies
        run: bun install

      - name: Build frontend
        run: bun run build

      - name: Build Tauri app
        run: bun run tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Linux 特定环境变量
          PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig
          LD_LIBRARY_PATH: /usr/lib/x86_64-linux-gnu
          # macOS 特定环境变量
          MACOSX_DEPLOYMENT_TARGET: "10.15"
          # Windows 特定环境变量
          CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_LINKER: "link.exe"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ github.ref_name }}
          path: |
            src-tauri/target/release/bundle/
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/macos-latest-*/**/*.dmg
            artifacts/macos-latest-*/**/*.app.tar.gz
            artifacts/ubuntu-22.04-*/**/*.AppImage
            artifacts/ubuntu-22.04-*/**/*.deb
            artifacts/windows-latest-*/**/*.msi
            artifacts/windows-latest-*/**/*.exe
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 